
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for IO.
//* This is a template file: You may modify this file to implement the
//* behavior of your component.
//*
//* Model Builder version: 3.1.0
//* Generated on: Mar. 02, 2011 05:47:43 PM, (user: dvolinsk)
//* Automatically merged on: Feb. 22, 2012 07:00:34 PM, (user: zamir)
//*>


#pragma once

#include "IO_model.h"
#include "JPEG_ENCODER_model.h"
#include "jpeg.h"
#include "bmp.h"

using namespace tlm;

// This class inherits from the IO_pv_base class
class IO_pv : public IO_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(IO_pv);
  IO_pv(sc_module_name module_name);

 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  //////////////////////////////////////////
  void cb_write_upload(unsigned int newValue);
  void cb_write_download(unsigned int newValue);

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  ////////////////////////////////////////
  bool slave_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  unsigned slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  ////////////////////////////////////////
  bool slave_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  unsigned slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);

 private:
  // ac_channel <bool> start_jpeg;
  // ac_channel <bool> done_jpeg;
  unsigned char jpeg_data [3 * MAX_ROWS * MAX_COLUMNS]; // compress JPEG stream in bytes
  uint21 jpeg_data_len_t; // number of bytes in stream
  rgb_t rgb [MAX_ROWS * MAX_COLUMNS]; // full RGB image struct
  rgb_t rgb_stream [3 * MAX_ROWS * MAX_COLUMNS]; // reordered and tripled RGB to allow streaming into JPEG compressor
  unsigned char mem1 [3 * 4 * MAX_ROWS * MAX_COLUMNS];
  unsigned char memTest [3 * 4 * MAX_ROWS * MAX_COLUMNS];

};

