
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for H264_DECODER.
//* This is a template file: You may modify this file to implement the
//* behavior of your component.
//*
//* Model Builder version: 3.1.0
//* Generated on: Apr. 10, 2011 02:32:49 PM, (user: dvolinsk)
//* Automatically merged on: Apr. 11, 2011 11:34:07 AM, (user: dvolinsk)
//* Automatically merged on: Apr. 12, 2011 01:39:08 PM, (user: dvolinsk)
//* Automatically merged on: Apr. 12, 2011 01:57:29 PM, (user: dvolinsk)
//* Automatically merged on: Apr. 12, 2011 01:58:06 PM, (user: dvolinsk)
//* Automatically merged on: Apr. 12, 2011 01:59:01 PM, (user: dvolinsk)
//* Automatically merged on: Apr. 12, 2011 02:10:48 PM, (user: dvolinsk)
//* Automatically merged on: Apr. 12, 2011 02:11:13 PM, (user: dvolinsk)
//* Automatically merged on: Feb. 22, 2012 07:00:33 PM, (user: zamir)
//*>


#pragma once

#include "ldecod.h"
#include "H264_DECODER_model.h"

#define LENGTH 358624

using namespace tlm;

// This class inherits from the H264_DECODER_pv_base class
class H264_DECODER_pv : public H264_DECODER_pv_base {
 public:
  typedef esl::tlm_types::Address mb_address_type;
 public:
  // Constructor
  // Do not add parameters here.
  // To add parameters - use the Model Builder form (under PV->Parameters tab)
  SC_HAS_PROCESS(H264_DECODER_pv);
  H264_DECODER_pv(sc_module_name module_name);

 protected:
  ////////////////////////////////////////
  // read callbacks of registers
  ////////////////////////////////////////
  virtual unsigned long long cb_read_frame_done();

 protected:
  /////////////////////////////////////////
  // write callbacks of registers
  //////////////////////////////////////////
  void cb_write_start(unsigned long long newValue);
  void cb_write_stop(unsigned long long newValue);
  void cb_write_frame_done(unsigned long long newValue);

 protected:
  ////////////////////////////////////////
  // target ports read callbacks
  ////////////////////////////////////////
  bool slave_callback_read(mb_address_type address, unsigned char* data, unsigned size);
  unsigned slave_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size);

 protected:
  ////////////////////////////////////////
  // target ports write callbacks
  ////////////////////////////////////////
  bool slave_callback_write(mb_address_type address, unsigned char* data, unsigned size);
  unsigned slave_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size);
  bool slave_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData);

private:
  void algorithm_thread();
  void frame_ready_thread();

private:
  unsigned char Frame [LENGTH];
  sc_core::sc_event algorithm_event;
};

