
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* This class contains the infrastructure to define the behavior of the component.
//* The axi2apb_bridge_pv will be derived from this class.
//*
//* Model Builder version: 4.1.0
//* Generated on: Jan. 18, 2016 04:09:45 PM, (user: mbradley)
//*>


#include "axi2apb_bridge_model.h"

#ifdef MODEL_BUILDER_VERSION_NUMBER
#if 4100 != MODEL_BUILDER_VERSION_NUMBER
#error "This model was generated using Model Builder version: 4.1.0. Please regenerate model."
#endif
#else
#error "Please regenerate model."
#endif

using namespace sc_core;
using namespace sc_dt;
using namespace std;


axi2apb_bridge_pv_base::axi2apb_bridge_pv_base(sc_module_name& module_name) : 
  axi2apb_bridge_pv_base_mb_compatibility(module_name),
  axi2apb_bridge_pv_base_parameters(this),
  VISTA_MB_PV_INIT_MEMBER(apb_master),
  VISTA_MB_PV_INIT_MEMBER(axi_slave) {


  payload_on_stack = 0;
  payload_for_token = 0;

  VISTA_MB_PV_BIND_FW_PROCESS_TO_TARGET(axi_slave);
  VISTA_MB_PV_BIND_BW_PROCESS_TO_MASTER(apb_master);
  VISTA_MB_PV_REGISTER_SELF_FW_PROCESS_CALLBACKS(axi_slave);
  VISTA_MB_PV_REGISTER_SELF_BW_PROCESS_CALLBACKS(apb_master);

}

void axi2apb_bridge_pv_base::reset_model() {
  // reset all registers


  
  // reset value for output signals

  // reset value for input signals

}

axi2apb_bridge_pv_base_parameters::axi2apb_bridge_pv_base_parameters(sc_object* object) :
  m_object(object),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, clock, sc_core::sc_time(10, sc_core::SC_NS)),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, axi_clock, clock),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, apb_clock, clock),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, nominal_voltage, 1),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug, false),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, call_to_default_if, false),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, verbose_parameters, true),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, dmi_enabled, true),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, warning_level, "WARNING"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, axi_slave_pipeline_length, 2),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, axi_slave_outstanding, 1),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, axi_slave_read_data_queue_size, 0),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, axi_slave_write_data_queue_size, 0)
{
  if(verbose_parameters) print_parameters();
}

void axi2apb_bridge_pv_base_parameters::print_parameters()
{
  const char* name;
  if (!strcmp(m_object->basename(), "PV"))
    name = m_object->get_parent()->name();
  else
    name = m_object->name();

  std::cout.setf(ios::hex, ios::basefield);
  std::cout.setf(ios::showbase);
  std::cout << name << "::parameters:\n";
  std::cout << "\tclock = " << clock << "\n";
  std::cout << "\taxi_clock = " << axi_clock << "\n";
  std::cout << "\tapb_clock = " << apb_clock << "\n";
  std::cout << "\tnominal_voltage = " << nominal_voltage << "\n";
  std::cout << "\tmb_debug = " << mb_debug << "\n";
  std::cout << "\tcall_to_default_if = " << call_to_default_if << "\n";
  std::cout << "\tverbose_parameters = " << verbose_parameters << "\n";
  std::cout << "\tdmi_enabled = " << dmi_enabled << "\n";
  std::cout << "\twarning_level = " << warning_level << "\n";
  std::cout << "\taxi_slave_pipeline_length = " << axi_slave_pipeline_length << "\n";
  std::cout << "\taxi_slave_outstanding = " << axi_slave_outstanding << "\n";
  std::cout << "\taxi_slave_read_data_queue_size = " << axi_slave_read_data_queue_size << "\n";
  std::cout << "\taxi_slave_write_data_queue_size = " << axi_slave_write_data_queue_size << "\n";
  std::cout.unsetf(ios::showbase);
  std::cout.setf(ios::dec, ios::basefield);
  std::cout << std::endl;
}



/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file is used only for learning the component.
//* It contains the machine architecture class for your axi2apb_bridge model.
//* 
//* Model Builder version: 4.1.0
//* Generated on: Jan. 18, 2016 04:09:45 PM, (user: mbradley)
//*>

#include "axi2apb_bridge_model.h"
#include "model_builder.h"

using namespace ::mb::utl::minmax;

axi2apb_bridge_machine_arch::axi2apb_bridge_machine_arch()
    : MachineArch(2, 0) {
        reset();
    }
    
    ////////////////////////////////////////////////////////////////////
    //   function for port: axi_slave
    ////////////////////////////////////////////////////////////////////
    
    
    //////
    // functions for port: axi_slave, transaction: WRITE
    //////
    
    void axi2apb_bridge_machine_arch::transaction_instance__axi_slave__WRITE
      (
        sc_dt::uint64 _address,
        sc_dt::uint64 _size,
        sc_dt::uint64 _data, 
        bool has_been_error, 
        sc_dt::uint64 currentTime
      )
    {
      
    }
    
    //////
    // functions for port: axi_slave, transaction: READ
    //////
    
    void axi2apb_bridge_machine_arch::transaction_instance__axi_slave__READ
      (
        sc_dt::uint64 _address,
        sc_dt::uint64 _size,
        sc_dt::uint64 _data, 
        bool has_been_error, 
        sc_dt::uint64 currentTime
      )
    {
      
    }
    
    ////////////////////////////////////////////////////////////////////
    //   function for port: apb_master
    ////////////////////////////////////////////////////////////////////
    
    
    //////
    // functions for port: apb_master, transaction: READ
    //////
    
    void axi2apb_bridge_machine_arch::transaction_instance__apb_master__READ
      (
        sc_dt::uint64 _address,
        sc_dt::uint64 _size,
        sc_dt::uint64 _data, 
        bool has_been_error, 
        sc_dt::uint64 currentTime
      )
    {
      
    }
    
    //////
    // functions for port: apb_master, transaction: WRITE
    //////
    
    void axi2apb_bridge_machine_arch::transaction_instance__apb_master__WRITE
      (
        sc_dt::uint64 _address,
        sc_dt::uint64 _size,
        sc_dt::uint64 _data, 
        bool has_been_error, 
        sc_dt::uint64 currentTime
      )
    {
      
    }

void axi2apb_bridge_machine_arch::startTransaction(unsigned portIndex, unsigned transactionIndex, sc_dt::uint64 currentTime) {
  switch(portIndex) {
    case(0) : break;
    case(1) : break;
    default: break;
  }
}
VariableBase* axi2apb_bridge_machine_arch::getVariableBasePtrByName(const char* name) {
  return NULL;
}
Register* axi2apb_bridge_machine_arch::getRegisterByName(const char* name) {
  return 0;
}
void axi2apb_bridge_machine_arch::reset() { 
    MachineArch::reset();
}
bool axi2apb_bridge_machine_arch::getAddressRange(unsigned portIndex, sc_dt::uint64& begin, sc_dt::uint64& end) {
    switch(portIndex) {
        case(0) :   return false;
        case(1) :   return false;
        default: break;
    }
    return false; 
}
void axi2apb_bridge_machine_arch::callTransaction(unsigned portIndex, unsigned transactionIndex, sc_dt::uint64 address, sc_dt::uint64 size, sc_dt::uint64 data, bool has_been_error, sc_dt::uint64 currentTime) {
    switch(portIndex) {
        case(0) : { //port: axi_slave
            switch(transactionIndex) {
                case(0) : { //transaction: WRITE
                    this->transaction_instance__axi_slave__WRITE
                      (
                        address, 
                        size, 
                        data, 
                        has_been_error, 
                        currentTime
                      );
                    break;
                }
                case(1) : { //transaction: READ
                    this->transaction_instance__axi_slave__READ
                      (
                        address, 
                        size, 
                        data, 
                        has_been_error, 
                        currentTime
                      );
                    break;
                }
            }
            break;
        }
        case(1) : { //port: apb_master
            switch(transactionIndex) {
                case(0) : { //transaction: READ
                    this->transaction_instance__apb_master__READ
                      (
                        address, 
                        size, 
                        data, 
                        has_been_error, 
                        currentTime
                      );
                    break;
                }
                case(1) : { //transaction: WRITE
                    this->transaction_instance__apb_master__WRITE
                      (
                        address, 
                        size, 
                        data, 
                        has_been_error, 
                        currentTime
                      );
                    break;
                }
            }
            break;
        }
        default: break;
    }
}


/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* 
//* Any change in parameters, policies, ports, protocols, etc. will change this file
//* upon generation of the timing model (using generate_timing_model command).
//* The axi2apb_bridge_t will be derived from this class.
//*
//* Model Builder version: 4.1.0
//* Generated on: Jan. 18, 2016 04:09:45 PM, (user: mbradley)
//*>




#include "axi2apb_bridge_model.h"
#include <math.h>
#include <stdlib.h>

using namespace esl::tlm_sim;
using namespace esl::sc_sim;
using namespace std;
using namespace sc_dt;
using namespace sc_core;


void axi2apb_bridge_t_base::schedule_apb_READ
(long port_index,
 sc_dt::uint64 delay,
 long& transactionSize,
 esl::include::transaction_power& power , long PADDR, long* PRDATA, long block_size) {
  sc_dt::uint64 local_address = 0;
  local_address = PADDR,
  scheduleGenericTransaction(port_index,
                             0,
                             local_address,
                             (unsigned char*)PRDATA,
                             transactionSize,
                             block_size,
                             0, papoulis::getSimulationTime() + delay,
                             0,
                             0);
}

void axi2apb_bridge_t_base::schedule_apb_WRITE
(long port_index,
 sc_dt::uint64 delay,
 long& transactionSize,
 esl::include::transaction_power& power , long PADDR, long* PWDATA, long block_size) {
  sc_dt::uint64 local_address = 0;
  local_address = PADDR,
  scheduleGenericTransaction(port_index,
                             1,
                             local_address,
                             (unsigned char*)PWDATA,
                             transactionSize,
                             block_size,
                             0, papoulis::getSimulationTime() + delay,
                             0,
                             0);
}



void axi2apb_bridge_t_base::start_transaction_axi_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();
  
  this->getMachineArch()->startTransaction(port_index,
                                           1,
                                           startTime);
  
  this->accept_axi_READ
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2], 
     parameters[3], 
     parameters[4], 
     parameters[5], 
     parameters[6], 
     parameters[7]);
}

void axi2apb_bridge_t_base::end_transaction_axi_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();                                                                         
  this->getMachineArch()->callTransaction(port_index, 
                                          1, 
                                          request->getAddress(),
                                          burstSize,
                                          request->getFirstDataBlock(),
                                          hasBeenError,
                                          startTime);
  
  this->end_axi_READ
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2],
     parameters[3],
     parameters[4],
     parameters[5],
     parameters[6],
     parameters[7]);
}
void axi2apb_bridge_t_base::start_transaction_axi_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();
  
  this->getMachineArch()->startTransaction(port_index,
                                           0,
                                           startTime);
  
  this->accept_axi_WRITE
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2], 
     parameters[3], 
     parameters[4], 
     parameters[5], 
     parameters[6], 
     parameters[7]);
}

void axi2apb_bridge_t_base::end_transaction_axi_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();                                                                         
  this->getMachineArch()->callTransaction(port_index, 
                                          0, 
                                          request->getAddress(),
                                          burstSize,
                                          request->getFirstDataBlock(),
                                          hasBeenError,
                                          startTime);
  
  this->end_axi_WRITE
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2],
     parameters[3],
     parameters[4],
     parameters[5],
     parameters[6],
     parameters[7]);
}
void axi2apb_bridge_t_base::start_transaction_apb_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[0] = request->getAddress();
  parameters[1] = request->getFirstDataBlock();
  parameters[2] = request->getBlockSize();
  
  this->getMachineArch()->startTransaction(port_index,
                                           0,
                                           startTime);
  
  this->accept_apb_READ
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2]);
}

void axi2apb_bridge_t_base::end_transaction_apb_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[0] = request->getAddress();
  parameters[1] = request->getFirstDataBlock();
  parameters[2] = request->getBlockSize();                                                                         
  this->getMachineArch()->callTransaction(port_index, 
                                          0, 
                                          request->getAddress(),
                                          burstSize,
                                          request->getFirstDataBlock(),
                                          hasBeenError,
                                          startTime);
  
  this->end_apb_READ
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2]);
}
void axi2apb_bridge_t_base::start_transaction_apb_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[0] = request->getAddress();
  parameters[1] = request->getFirstDataBlock();
  parameters[2] = request->getBlockSize();
  
  this->getMachineArch()->startTransaction(port_index,
                                           1,
                                           startTime);
  
  this->accept_apb_WRITE
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2]);
}

void axi2apb_bridge_t_base::end_transaction_apb_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[0] = request->getAddress();
  parameters[1] = request->getFirstDataBlock();
  parameters[2] = request->getBlockSize();                                                                         
  this->getMachineArch()->callTransaction(port_index, 
                                          1, 
                                          request->getAddress(),
                                          burstSize,
                                          request->getFirstDataBlock(),
                                          hasBeenError,
                                          startTime);
  
  this->end_apb_WRITE
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2]);
}

axi2apb_bridge_t_base::TransactionCallbackFunctionPointer axi2apb_bridge_t_base::getTransactionCallback(unsigned callbackIndex) {
  static TransactionCallbackFunctionPointer funcArray[] = {
    static_cast<TransactionCallbackFunctionPointer>(&axi2apb_bridge_t_base::start_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&axi2apb_bridge_t_base::start_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&axi2apb_bridge_t_base::start_transaction_apb_READ),
    static_cast<TransactionCallbackFunctionPointer>(&axi2apb_bridge_t_base::start_transaction_apb_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&axi2apb_bridge_t_base::end_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&axi2apb_bridge_t_base::end_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&axi2apb_bridge_t_base::end_transaction_apb_READ),
    static_cast<TransactionCallbackFunctionPointer>(&axi2apb_bridge_t_base::end_transaction_apb_WRITE),
    0
  };
  if(callbackIndex >= sizeof(funcArray) / sizeof(*funcArray) - 1)
    return 0;
  return funcArray[callbackIndex];
}

config::real80 axi2apb_bridge_t_base::get_state_power() { 
  config::real80 power_value = 0;

  

  return power_value;
}

axi2apb_bridge_t_base::axi2apb_bridge_t_base(sc_module_name& module_name, long simulation) :
  papoulis::SystemCBaseModel(module_name),
  m_machineArch(new axi2apb_bridge_machine_arch()),
  SD_INITIALIZE_PARAMETER(clock, sc_core::sc_time(10, sc_core::SC_NS)),
  SD_INITIALIZE_PARAMETER(axi_clock, clock),
  SD_INITIALIZE_PARAMETER(apb_clock, clock),
  SD_INITIALIZE_PARAMETER(nominal_voltage, 1),
  SD_INITIALIZE_PARAMETER(mb_debug, false),
  SD_INITIALIZE_PARAMETER(call_to_default_if, false),
  SD_INITIALIZE_PARAMETER(verbose_parameters, true),
  SD_INITIALIZE_PARAMETER(dmi_enabled, true),
  SD_INITIALIZE_PARAMETER(warning_level, "WARNING"),
  SD_INITIALIZE_PARAMETER(axi_slave_pipeline_length, 2),
  SD_INITIALIZE_PARAMETER(axi_slave_outstanding, 1),
  SD_INITIALIZE_PARAMETER(axi_slave_read_data_queue_size, 0),
  SD_INITIALIZE_PARAMETER(axi_slave_write_data_queue_size, 0),
  m_simulation(simulation)
{
  bool separate_read_channel = false;
  bool separate_write_channel = false;
  fix_clock_parameter(axi_clock, "axi_clock");
  separate_read_channel = false;
  separate_write_channel = false;
  port_descriptions[axi_slave].port_name = "axi_slave";
  separate_read_channel = true;
  port_descriptions[axi_slave].port_kind = PortDescription::READ_CHANNEL_PORT;
  separate_write_channel = true;
  port_descriptions[axi_slave].port_kind = PortDescription::WRITE_CHANNEL_PORT;
  if (separate_write_channel && separate_read_channel)
    port_descriptions[axi_slave].port_kind = PortDescription::SEPARATE_READ_WRIE_CHANNEL_PORT;
  port_descriptions[axi_slave].is_read_write_address_channel = 0;
  
  port_descriptions[axi_slave].is_master_port = 0;
  port_descriptions[axi_slave].is_signal_port = 0;
  port_descriptions[axi_slave].port_width = ((64 + 7) >> 3);
  port_descriptions[axi_slave].port_width_in_bits = 64;
  port_descriptions[axi_slave].protocol_name = "axi";
  port_descriptions[axi_slave].ipxactBusDef.vendor = "amba.com";
  port_descriptions[axi_slave].ipxactBusDef.library = "AMBA3";
  port_descriptions[axi_slave].ipxactBusDef.name = "AXI";
  port_descriptions[axi_slave].ipxactBusDef.version = "r1p0_5"; 
  port_descriptions[axi_slave].ipxactAbstrDef.vendor = "Mentor.com";
  port_descriptions[axi_slave].ipxactAbstrDef.library = "Lib_ipxact";
  port_descriptions[axi_slave].ipxactAbstrDef.name = "AXI_tlm20";
  port_descriptions[axi_slave].ipxactAbstrDef.version = "1.0";
  port_descriptions[axi_slave].port_must_bind = 1;
  port_descriptions[axi_slave].params_count = 8;
  if (axi_slave_outstanding == 0) {
    axi_slave_outstanding = 1;
    printf("WARNING: in \"%s\" the \"axi_slave_outstanding\" parameter is 0, a default value of 1 is used\n", name());
  }
  port_descriptions[axi_slave].pending = axi_slave_outstanding;
  port_descriptions[axi_slave].read_data_queue_size = axi_slave_read_data_queue_size;
  port_descriptions[axi_slave].write_data_queue_size = axi_slave_write_data_queue_size;
  port_descriptions[axi_slave].clock = axi_clock;
  m_machineArch->configureClock(axi_slave, mb::sysc::sc_time_to_ps(axi_clock));
  port_descriptions[axi_slave].add_read_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !0, 0);
  port_descriptions[axi_slave].add_read_phase(tlm::tlm_phase(tlm::END_REQ), !1, 0);
  port_descriptions[axi_slave].add_read_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !1, 1);
  port_descriptions[axi_slave].add_read_phase(tlm::tlm_phase(tlm::END_RESP), !0, 1);
  port_descriptions[axi_slave].add_write_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !0, 0);
  port_descriptions[axi_slave].add_write_phase(tlm::tlm_phase(tlm::END_REQ), !1, 0);
  port_descriptions[axi_slave].add_write_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !1, 1);
  port_descriptions[axi_slave].add_write_phase(tlm::tlm_phase(tlm::END_RESP), !0, 1);

  fix_clock_parameter(apb_clock, "apb_clock");
  separate_read_channel = false;
  separate_write_channel = false;
  port_descriptions[apb_master].port_name = "apb_master";
  port_descriptions[apb_master].port_kind = PortDescription::READ_WRITE_CHANNEL_PORT;
  if (separate_write_channel && separate_read_channel)
    port_descriptions[apb_master].port_kind = PortDescription::SEPARATE_READ_WRIE_CHANNEL_PORT;
  port_descriptions[apb_master].is_read_write_address_channel = 0;
  
  port_descriptions[apb_master].is_read_write_address_channel = 1;
  port_descriptions[apb_master].is_master_port = 1;
  port_descriptions[apb_master].is_signal_port = 0;
  port_descriptions[apb_master].port_width = ((32 + 7) >> 3);
  port_descriptions[apb_master].port_width_in_bits = 32;
  port_descriptions[apb_master].protocol_name = "apb";
  port_descriptions[apb_master].ipxactBusDef.vendor = "amba.com";
  port_descriptions[apb_master].ipxactBusDef.library = "AMBA2";
  port_descriptions[apb_master].ipxactBusDef.name = "APB";
  port_descriptions[apb_master].ipxactBusDef.version = "r2p0_4"; 
  port_descriptions[apb_master].ipxactAbstrDef.vendor = "Mentor.com";
  port_descriptions[apb_master].ipxactAbstrDef.library = "Lib_ipxact";
  port_descriptions[apb_master].ipxactAbstrDef.name = "APB_tlm20";
  port_descriptions[apb_master].ipxactAbstrDef.version = "1.0";
  port_descriptions[apb_master].port_must_bind = 1;
  port_descriptions[apb_master].params_count = 3;
  port_descriptions[apb_master].clock = apb_clock;
  m_machineArch->configureClock(apb_master, mb::sysc::sc_time_to_ps(apb_clock));
  port_descriptions[apb_master].add_read_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !1, 1);
  port_descriptions[apb_master].add_read_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !0, 1);


  port_descriptions[axi_slave].default_read_transaction_name = "READ";
  port_descriptions[apb_master].default_read_transaction_name = "READ";
  port_descriptions[axi_slave].default_write_transaction_name = "WRITE";
  port_descriptions[apb_master].default_write_transaction_name = "WRITE";

  fix_internal_clock_parameter(clock, "clock");
  set_ports(mb::sysc::sc_time_to_ps(clock), port_count, port_descriptions);

  bool isCpu = false;
  
  esl::tlm_sim::UserRunningModel* userRunningModel = Papoulis_CreateUserRunningModel(name(),
                                                                                     0,
                                                                                     this,
                                                                                     simulation,
                                                                                     false,
                                                                                     isCpu);
  setUserRunningModel(userRunningModel, isCpu);
  set_nominal_voltage(nominal_voltage);
  registerParameter("clock", "sc_core::sc_time", sdGetParameterAsConstString("clock"));
  registerParameter("axi_clock", "sc_core::sc_time", sdGetParameterAsConstString("axi_clock"));
  registerParameter("apb_clock", "sc_core::sc_time", sdGetParameterAsConstString("apb_clock"));
  registerParameter("nominal_voltage", "double", sdGetParameterAsConstString("nominal_voltage"));
  registerParameter("mb_debug", "bool", sdGetParameterAsConstString("mb_debug"));
  registerParameter("call_to_default_if", "bool", sdGetParameterAsConstString("call_to_default_if"));
  registerParameter("verbose_parameters", "bool", sdGetParameterAsConstString("verbose_parameters"));
  registerParameter("dmi_enabled", "bool", sdGetParameterAsConstString("dmi_enabled"));
  registerParameter("warning_level", "const char*", sdGetParameterAsConstString("warning_level"));
  registerParameter("axi_slave_pipeline_length", "unsigned int", sdGetParameterAsConstString("axi_slave_pipeline_length"));
  registerParameter("axi_slave_outstanding", "unsigned int", sdGetParameterAsConstString("axi_slave_outstanding"));
  registerParameter("axi_slave_read_data_queue_size", "unsigned int", sdGetParameterAsConstString("axi_slave_read_data_queue_size"));
  registerParameter("axi_slave_write_data_queue_size", "unsigned int", sdGetParameterAsConstString("axi_slave_write_data_queue_size"));
  set_sync_all(0); 
  set_sync_all(1);
  
  
  
  unsigned sequential_policy_index = 0;
  sequential_policy* sequential_policy_handle = 0;
  user_sequential_policy_descriptions[sequential_policy_index].firstTransaction = "axi_slave";
  user_sequential_policy_descriptions[sequential_policy_index].secondTransaction = "apb_master";
  user_sequential_policy_descriptions[sequential_policy_index].setLatency(0);
  user_sequential_policy_descriptions[sequential_policy_index].syncMode = mb::tlm20::SYNC_BEGIN;
  sequential_policy_handle = new sequential_policy(userRunningModel, user_sequential_policy_descriptions[sequential_policy_index]);
  m_sequential_vector.push_back(sequential_policy_handle);
  sequential_policy_handle->set_power(0);
  sequential_policy_index++;
  set_user_sequential_policies(user_sequential_policy_count, user_sequential_policy_descriptions);
  
  

  
  

  delay_policy* delay_policy_handle = 0;

  delay_policy_handle = new delay_policy(userRunningModel,
                                         "axi_slave",
                                         0,
                                         0,
                                         mb::tlm20::SYNC_BEGIN);
  delay_policy_handle->set_power(0);
  m_delay_vector.push_back(delay_policy_handle);

  

  constant_global_power_policy* p = new constant_global_power_policy(userRunningModel);
  
  
  set_nominal_clock(1000000/100); /* in ps */ 
  update_coefficients();
  set_global_power_policy(p);
}

void axi2apb_bridge_t_base::update_sync_all() {
  set_sync_all(0);
  set_sync_all(1);
}

void axi2apb_bridge_t_base::update_pipeline_parameters(esl::sc_sim::pipeline_policy* handle) {
  if (m_pipeline_vector.size() == 0)
    return;


}

void axi2apb_bridge_t_base::update_sequential_parameters(esl::sc_sim::sequential_policy* handle) {
  if (m_sequential_vector.size() == 0)
    return;

  if (handle == m_sequential_vector[0]) {
    handle->setLatency(0);
    handle->setSyncMode(mb::tlm20::SYNC_BEGIN);
    handle->set_power(0);
    return;
  }
}

void axi2apb_bridge_t_base::update_delay_parameters(esl::sc_sim::delay_policy* handle) {
  if (m_delay_vector.size() == 0)
    return;

  if (handle == m_delay_vector[0]) {
    handle->set_inner_delay(0);
    handle->set_start_delay(0);
    handle->setSyncMode(mb::tlm20::SYNC_BEGIN);
    handle->set_power(0);
    return;
  }
}

void axi2apb_bridge_t_base::update_bus_parameters(esl::sc_sim::uniform_bus_policy* handle) {
  if (m_bus_vector.size() == 0)
    return;

}

void axi2apb_bridge_t_base::update_power_parameters(esl::sc_sim::power_policy* handle) {
  if (m_power_vector.size() == 0)
    return;

}

void axi2apb_bridge_t_base::update_state_power_parameters(esl::sc_sim::state_power_policy* handle) {
  if (m_state_power_vector.size() == 0)
    return;

}

void axi2apb_bridge_t_base::update_global_power_parameters(esl::sc_sim::constant_global_power_policy* handle) {
  
  
  return;  
}

bool axi2apb_bridge_t_base::triggerRegistersGotHit(unsigned portIndex, tlm::tlm_generic_payload& trans) {
  mb::utl::Segment<uint64_t> transactionRange(trans.get_address(), trans.get_address() + trans.get_data_length());

  return false;
}

bool axi2apb_bridge_t_base::portHasRegisters(unsigned portIndex) {
  switch (portIndex) {

  }
  return false;
}



/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file contains the PVT class for axi2apb_bridge.
//* It connects between the PV and T models.
//* Your top-level design should instantiate this model.
//* 
//* In order to synchronize the activty between the PV and the T models, every 
//* PV transaction is monitored and queued in the T sync ports.
//* Whenever a synchronization point is reached, the T models are executed and 
//* the corresponding T transactions are launched.
//* A synchronization point is reached whenever there is a wait statement on a testbench thread. 
//*
//* Model Builder version: 4.1.0
//* Generated on: Jan. 18, 2016 04:09:45 PM, (user: mbradley)
//*>

#include "axi2apb_bridge_model.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


#include "axi2apb_bridge_pv.h"




// Constructor
axi2apb_bridge_pvt::axi2apb_bridge_pvt(sc_module_name module_name)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
    axi2apb_bridge_pvt_param_defaults(this->name()),
    apb_master("apb_master"),
    axi_slave("axi_slave"), 
    apb_master_entry("unvisible_apb_master_entry"),
    axi_slave_entry("unvisible_axi_slave_entry"),
    m_apb_master_nb_connector(*this),
    m_axi_slave_nb_connector(*this)

{


  m_axi2apb_bridge_t = axi2apb_bridge_t_base::create_t("T", 1);
  m_axi2apb_bridge_pv = new axi2apb_bridge_pv("PV");
  bind();
}  


axi2apb_bridge_pvt::axi2apb_bridge_pvt(sc_module_name module_name, sc_core::sc_time clock_init, sc_core::sc_time axi_clock_init, sc_core::sc_time apb_clock_init, double nominal_voltage_init, bool mb_debug_init, bool call_to_default_if_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, unsigned int axi_slave_pipeline_length_init, unsigned int axi_slave_outstanding_init, unsigned int axi_slave_read_data_queue_size_init, unsigned int axi_slave_write_data_queue_size_init)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
  axi2apb_bridge_pvt_param_defaults(this->name(), clock_init, axi_clock_init, apb_clock_init, nominal_voltage_init, mb_debug_init, call_to_default_if_init, verbose_parameters_init, dmi_enabled_init, warning_level_init, axi_slave_pipeline_length_init, axi_slave_outstanding_init, axi_slave_read_data_queue_size_init, axi_slave_write_data_queue_size_init),
    apb_master("apb_master"),
    axi_slave("axi_slave"), 
    apb_master_entry("unvisible_apb_master_entry"),
    axi_slave_entry("unvisible_axi_slave_entry"),
    m_apb_master_nb_connector(*this),
    m_axi_slave_nb_connector(*this)
{


  m_axi2apb_bridge_t = axi2apb_bridge_t_base::create_t("T", 1);
  m_axi2apb_bridge_pv = new axi2apb_bridge_pv("PV");
  bind();
} 

axi2apb_bridge_pvt::axi2apb_bridge_pvt(sc_module_name module_name,  std::vector<std::pair<char*, unsigned int> > &change_parameters)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
  axi2apb_bridge_pvt_param_defaults(this->name(), change_parameters),
    apb_master("apb_master"),
    axi_slave("axi_slave"), 
    apb_master_entry("unvisible_apb_master_entry"),
    axi_slave_entry("unvisible_axi_slave_entry"),
    m_apb_master_nb_connector(*this),
    m_axi_slave_nb_connector(*this)
{


  m_axi2apb_bridge_t = axi2apb_bridge_t_base::create_t("T", 1);
  m_axi2apb_bridge_pv = new axi2apb_bridge_pv("PV");
  bind();
} 

axi2apb_bridge_pvt::~axi2apb_bridge_pvt() {
  remove_pending_scenes();
  delete m_axi2apb_bridge_t; delete m_axi2apb_bridge_pv;
}




void axi2apb_bridge_pvt::bind()
{
  /* connect pv to entry ports */
  
  
  getPV()->apb_master.bind(apb_master_entry);
  axi_slave_entry.bind(getPV()->axi_slave);   

  /* set callbacks on external and entry ports */ 

  axi_slave.b_transport_cb.set(&axi_slave_entry, &axi_slave_entry_type::b_transport);
  axi_slave.transport_dbg_cb.set(&axi_slave_entry, &axi_slave_entry_type::transport_dbg);
  axi_slave.get_direct_mem_ptr_cb.set(&axi_slave_entry, &axi_slave_entry_type::get_direct_mem_ptr);

  apb_master_entry.b_transport_cb.set(this, &self_type::b_transport_outside_apb_master);
  apb_master_entry.transport_dbg_cb.set(this, &self_type::transport_dbg_outside_apb_master);
  apb_master_entry.get_direct_mem_ptr_cb.set(&apb_master, &apb_master_type::get_direct_mem_ptr);

  
  /* connect t non blocking callbacks */

  apb_master.nb_transport_bw_cb.set(this, &self_type::receive_nb_transport_apb_master);
  getT()->set_port_cb(1, &m_apb_master_nb_connector);

  axi_slave.nb_transport_fw_cb.set(this, &self_type::receive_nb_transport_axi_slave);
  getT()->set_port_cb(0, &m_axi_slave_nb_connector);

  axi_slave_entry.invalidate_direct_mem_ptr_cb.set(&axi_slave, &axi_slave_type::invalidate_direct_mem_ptr);

  apb_master.invalidate_direct_mem_ptr_cb.set(&apb_master_entry, &apb_master_entry_type::invalidate_direct_mem_ptr);

  /* check mb_event policies */
  m_axi2apb_bridge_t->check_mb_events();
}



void axi2apb_bridge_pvt::b_transport_outside_apb_master(tlm::tlm_generic_payload& p, sc_core::sc_time& t)
{
  
  apb_master.b_transport(p, t);
  
} 

unsigned int axi2apb_bridge_pvt::transport_dbg_outside_apb_master(tlm::tlm_generic_payload& p)
{
  
  return apb_master.transport_dbg(p);
  
}

