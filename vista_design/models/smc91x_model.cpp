
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* This class contains the infrastructure to define the behavior of the component.
//* The smc91x_pv will be derived from this class.
//*
//* Model Builder version: 4.1.0
//* Generated on: Jan. 18, 2016 04:09:45 PM, (user: mbradley)
//*>


#include "smc91x_model.h"

#ifdef MODEL_BUILDER_VERSION_NUMBER
#if 4100 != MODEL_BUILDER_VERSION_NUMBER
#error "This model was generated using Model Builder version: 4.1.0. Please regenerate model."
#endif
#else
#error "Please regenerate model."
#endif

using namespace sc_core;
using namespace sc_dt;
using namespace std;


smc91x_pv_base::smc91x_pv_base(sc_module_name& module_name) : 
  smc91x_pv_base_mb_compatibility(module_name),
  smc91x_pv_base_parameters(this),
  VISTA_MB_PV_INIT_MEMBER(host),
  VISTA_MB_PV_INIT_MEMBER(irq) {


  payload_on_stack = 0;
  payload_for_token = 0;

  irq.initialize(0);
  VISTA_MB_PV_BIND_FW_PROCESS_TO_TARGET(host);
  VISTA_MB_PV_REGISTER_SELF_FW_PROCESS_CALLBACKS(host);

}

void smc91x_pv_base::reset_model() {
  // reset all registers


  
  // reset value for output signals

  irq.write(0);
  // reset value for input signals

}

smc91x_pv_base_parameters::smc91x_pv_base_parameters(sc_object* object) :
  m_object(object),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, clock, sc_core::sc_time(10, sc_core::SC_NS)),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, signal_clock, clock),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, axi_clock, clock),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, nominal_voltage, 1),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, mb_debug, false),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, call_to_default_if, false),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, verbose_parameters, true),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, dmi_enabled, true),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, warning_level, "WARNING"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, host_pipeline_length, 2),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, host_outstanding, 1),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, host_read_data_queue_size, 0),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, host_write_data_queue_size, 0),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, eth_name, "eth0"),
  SD_INITIALIZE_PARAMETER_EXTERNALLY(object, eth_mac, "52:54:00:12:34:56")
{
  if(verbose_parameters) print_parameters();
}

void smc91x_pv_base_parameters::print_parameters()
{
  const char* name;
  if (!strcmp(m_object->basename(), "PV"))
    name = m_object->get_parent()->name();
  else
    name = m_object->name();

  std::cout.setf(ios::hex, ios::basefield);
  std::cout.setf(ios::showbase);
  std::cout << name << "::parameters:\n";
  std::cout << "\tclock = " << clock << "\n";
  std::cout << "\tsignal_clock = " << signal_clock << "\n";
  std::cout << "\taxi_clock = " << axi_clock << "\n";
  std::cout << "\tnominal_voltage = " << nominal_voltage << "\n";
  std::cout << "\tmb_debug = " << mb_debug << "\n";
  std::cout << "\tcall_to_default_if = " << call_to_default_if << "\n";
  std::cout << "\tverbose_parameters = " << verbose_parameters << "\n";
  std::cout << "\tdmi_enabled = " << dmi_enabled << "\n";
  std::cout << "\twarning_level = " << warning_level << "\n";
  std::cout << "\thost_pipeline_length = " << host_pipeline_length << "\n";
  std::cout << "\thost_outstanding = " << host_outstanding << "\n";
  std::cout << "\thost_read_data_queue_size = " << host_read_data_queue_size << "\n";
  std::cout << "\thost_write_data_queue_size = " << host_write_data_queue_size << "\n";
  std::cout << "\teth_name = " << eth_name << "\n";
  std::cout << "\teth_mac = " << eth_mac << "\n";
  std::cout.unsetf(ios::showbase);
  std::cout.setf(ios::dec, ios::basefield);
  std::cout << std::endl;
}



/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file is used only for learning the component.
//* It contains the machine architecture class for your smc91x model.
//* 
//* Model Builder version: 4.1.0
//* Generated on: Jan. 18, 2016 04:09:45 PM, (user: mbradley)
//*>

#include "smc91x_model.h"
#include "model_builder.h"

using namespace ::mb::utl::minmax;

smc91x_machine_arch::smc91x_machine_arch()
    : MachineArch(2, 0) {
        reset();
    }
    
    ////////////////////////////////////////////////////////////////////
    //   function for port: host
    ////////////////////////////////////////////////////////////////////
    
    
    //////
    // functions for port: host, transaction: WRITE
    //////
    
    void smc91x_machine_arch::transaction_instance__host__WRITE
      (
        sc_dt::uint64 _address,
        sc_dt::uint64 _size,
        sc_dt::uint64 _data, 
        bool has_been_error, 
        sc_dt::uint64 currentTime
      )
    {
      
    }
    
    //////
    // functions for port: host, transaction: READ
    //////
    
    void smc91x_machine_arch::transaction_instance__host__READ
      (
        sc_dt::uint64 _address,
        sc_dt::uint64 _size,
        sc_dt::uint64 _data, 
        bool has_been_error, 
        sc_dt::uint64 currentTime
      )
    {
      
    }
    
    ////////////////////////////////////////////////////////////////////
    //   function for port: irq
    ////////////////////////////////////////////////////////////////////
    
    
    //////
    // functions for port: irq, transaction: WRITE
    //////
    
    void smc91x_machine_arch::transaction_instance__irq__WRITE
      (
        sc_dt::uint64 _address,
        sc_dt::uint64 _size,
        sc_dt::uint64 _data, 
        bool has_been_error, 
        sc_dt::uint64 currentTime
      )
    {
      
    }

void smc91x_machine_arch::startTransaction(unsigned portIndex, unsigned transactionIndex, sc_dt::uint64 currentTime) {
  switch(portIndex) {
    case(0) : break;
    case(1) : break;
    default: break;
  }
}
VariableBase* smc91x_machine_arch::getVariableBasePtrByName(const char* name) {
  return NULL;
}
Register* smc91x_machine_arch::getRegisterByName(const char* name) {
  return 0;
}
void smc91x_machine_arch::reset() { 
    MachineArch::reset();
}
bool smc91x_machine_arch::getAddressRange(unsigned portIndex, sc_dt::uint64& begin, sc_dt::uint64& end) {
    switch(portIndex) {
        case(0) :   return false;
        case(1) :   return false;
        default: break;
    }
    return false; 
}
void smc91x_machine_arch::callTransaction(unsigned portIndex, unsigned transactionIndex, sc_dt::uint64 address, sc_dt::uint64 size, sc_dt::uint64 data, bool has_been_error, sc_dt::uint64 currentTime) {
    switch(portIndex) {
        case(0) : { //port: host
            switch(transactionIndex) {
                case(0) : { //transaction: WRITE
                    this->transaction_instance__host__WRITE
                      (
                        address, 
                        size, 
                        data, 
                        has_been_error, 
                        currentTime
                      );
                    break;
                }
                case(1) : { //transaction: READ
                    this->transaction_instance__host__READ
                      (
                        address, 
                        size, 
                        data, 
                        has_been_error, 
                        currentTime
                      );
                    break;
                }
            }
            break;
        }
        case(1) : { //port: irq
            switch(transactionIndex) {
                case(0) : { //transaction: WRITE
                    this->transaction_instance__irq__WRITE
                      (
                        address, 
                        size, 
                        data, 
                        has_been_error, 
                        currentTime
                      );
                    break;
                }
            }
            break;
        }
        default: break;
    }
}


/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected. 
//* DO NOT MODIFY THIS FILE.
//*
//* This file is generated according to the parameters in the 
//* Model Builder form.
//* 
//* Any change in parameters, policies, ports, protocols, etc. will change this file
//* upon generation of the timing model (using generate_timing_model command).
//* The smc91x_t will be derived from this class.
//*
//* Model Builder version: 4.1.0
//* Generated on: Jan. 18, 2016 04:09:45 PM, (user: mbradley)
//*>




#include "smc91x_model.h"
#include <math.h>
#include <stdlib.h>

using namespace esl::tlm_sim;
using namespace esl::sc_sim;
using namespace std;
using namespace sc_dt;
using namespace sc_core;


void smc91x_t_base::schedule_signal_WRITE
(long port_index,
 sc_dt::uint64 delay,
 long& transactionSize,
 esl::include::transaction_power& power , long address, long* value_p, long block_size) {
  sc_dt::uint64 local_address = 0;
  local_address = address,
  scheduleGenericTransaction(port_index,
                             1,
                             local_address,
                             (unsigned char*)value_p,
                             transactionSize,
                             block_size,
                             0, papoulis::getSimulationTime() + delay,
                             0,
                             0);
}



void smc91x_t_base::start_transaction_axi_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();
  
  this->getMachineArch()->startTransaction(port_index,
                                           1,
                                           startTime);
  
  this->accept_axi_READ
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2], 
     parameters[3], 
     parameters[4], 
     parameters[5], 
     parameters[6], 
     parameters[7]);
}

void smc91x_t_base::end_transaction_axi_READ
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();                                                                         
  this->getMachineArch()->callTransaction(port_index, 
                                          1, 
                                          request->getAddress(),
                                          burstSize,
                                          request->getFirstDataBlock(),
                                          hasBeenError,
                                          startTime);
  
  this->end_axi_READ
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2],
     parameters[3],
     parameters[4],
     parameters[5],
     parameters[6],
     parameters[7]);
}
void smc91x_t_base::start_transaction_axi_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();
  
  this->getMachineArch()->startTransaction(port_index,
                                           0,
                                           startTime);
  
  this->accept_axi_WRITE
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2], 
     parameters[3], 
     parameters[4], 
     parameters[5], 
     parameters[6], 
     parameters[7]);
}

void smc91x_t_base::end_transaction_axi_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[1] = request->getAddress();
  parameters[2] = request->getFirstDataBlock();
  parameters[4] = request->getBlockSize();                                                                         
  this->getMachineArch()->callTransaction(port_index, 
                                          0, 
                                          request->getAddress(),
                                          burstSize,
                                          request->getFirstDataBlock(),
                                          hasBeenError,
                                          startTime);
  
  this->end_axi_WRITE
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2],
     parameters[3],
     parameters[4],
     parameters[5],
     parameters[6],
     parameters[7]);
}
void smc91x_t_base::start_transaction_signal_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  
  long burstSize = request->getSize();
  parameters[0] = request->getAddress();
  parameters[1] = request->getFirstDataBlock();
  parameters[2] = request->getBlockSize();
  
  this->getMachineArch()->startTransaction(port_index,
                                           0,
                                           startTime);
  
  this->accept_signal_WRITE
    (port_index, 
     startTime, 
     burstSize, 
     parameters[0], 
     parameters[1], 
     parameters[2]);
}

void smc91x_t_base::end_transaction_signal_WRITE
(esl::include::TRequest* request,
 unsigned port_index,
 sc_dt::uint64 startTime,
 sc_dt::uint64 endTime,
 sc_dt::uint64* parameters,
 bool hasBeenError) {
  long burstSize = request->getSize();
  parameters[0] = request->getAddress();
  parameters[1] = request->getFirstDataBlock();
  parameters[2] = request->getBlockSize();                                                                         
  this->getMachineArch()->callTransaction(port_index, 
                                          0, 
                                          request->getAddress(),
                                          burstSize,
                                          request->getFirstDataBlock(),
                                          hasBeenError,
                                          startTime);
  
  this->end_signal_WRITE
    (port_index,
     endTime,
     burstSize,
     parameters[0],
     parameters[1],
     parameters[2]);
}

smc91x_t_base::TransactionCallbackFunctionPointer smc91x_t_base::getTransactionCallback(unsigned callbackIndex) {
  static TransactionCallbackFunctionPointer funcArray[] = {
    static_cast<TransactionCallbackFunctionPointer>(&smc91x_t_base::start_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&smc91x_t_base::start_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&smc91x_t_base::null_transaction_callback),
    static_cast<TransactionCallbackFunctionPointer>(&smc91x_t_base::start_transaction_signal_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&smc91x_t_base::end_transaction_axi_READ),
    static_cast<TransactionCallbackFunctionPointer>(&smc91x_t_base::end_transaction_axi_WRITE),
    static_cast<TransactionCallbackFunctionPointer>(&smc91x_t_base::null_transaction_callback),
    static_cast<TransactionCallbackFunctionPointer>(&smc91x_t_base::end_transaction_signal_WRITE),
    0
  };
  if(callbackIndex >= sizeof(funcArray) / sizeof(*funcArray) - 1)
    return 0;
  return funcArray[callbackIndex];
}

config::real80 smc91x_t_base::get_state_power() { 
  config::real80 power_value = 0;

  

  return power_value;
}

smc91x_t_base::smc91x_t_base(sc_module_name& module_name, long simulation) :
  papoulis::SystemCBaseModel(module_name),
  m_machineArch(new smc91x_machine_arch()),
  SD_INITIALIZE_PARAMETER(clock, sc_core::sc_time(10, sc_core::SC_NS)),
  SD_INITIALIZE_PARAMETER(signal_clock, clock),
  SD_INITIALIZE_PARAMETER(axi_clock, clock),
  SD_INITIALIZE_PARAMETER(nominal_voltage, 1),
  SD_INITIALIZE_PARAMETER(mb_debug, false),
  SD_INITIALIZE_PARAMETER(call_to_default_if, false),
  SD_INITIALIZE_PARAMETER(verbose_parameters, true),
  SD_INITIALIZE_PARAMETER(dmi_enabled, true),
  SD_INITIALIZE_PARAMETER(warning_level, "WARNING"),
  SD_INITIALIZE_PARAMETER(host_pipeline_length, 2),
  SD_INITIALIZE_PARAMETER(host_outstanding, 1),
  SD_INITIALIZE_PARAMETER(host_read_data_queue_size, 0),
  SD_INITIALIZE_PARAMETER(host_write_data_queue_size, 0),
  SD_INITIALIZE_PARAMETER(eth_name, "eth0"),
  SD_INITIALIZE_PARAMETER(eth_mac, "52:54:00:12:34:56"),
  m_simulation(simulation)
{
  bool separate_read_channel = false;
  bool separate_write_channel = false;
  fix_clock_parameter(axi_clock, "axi_clock");
  separate_read_channel = false;
  separate_write_channel = false;
  port_descriptions[host].port_name = "host";
  separate_read_channel = true;
  port_descriptions[host].port_kind = PortDescription::READ_CHANNEL_PORT;
  separate_write_channel = true;
  port_descriptions[host].port_kind = PortDescription::WRITE_CHANNEL_PORT;
  if (separate_write_channel && separate_read_channel)
    port_descriptions[host].port_kind = PortDescription::SEPARATE_READ_WRIE_CHANNEL_PORT;
  port_descriptions[host].is_read_write_address_channel = 0;
  
  port_descriptions[host].is_master_port = 0;
  port_descriptions[host].is_signal_port = 0;
  port_descriptions[host].port_width = ((32 + 7) >> 3);
  port_descriptions[host].port_width_in_bits = 32;
  port_descriptions[host].protocol_name = "axi";
  port_descriptions[host].ipxactBusDef.vendor = "amba.com";
  port_descriptions[host].ipxactBusDef.library = "AMBA3";
  port_descriptions[host].ipxactBusDef.name = "AXI";
  port_descriptions[host].ipxactBusDef.version = "r1p0_5"; 
  port_descriptions[host].ipxactAbstrDef.vendor = "Mentor.com";
  port_descriptions[host].ipxactAbstrDef.library = "Lib_ipxact";
  port_descriptions[host].ipxactAbstrDef.name = "AXI_tlm20";
  port_descriptions[host].ipxactAbstrDef.version = "1.0";
  port_descriptions[host].port_must_bind = 1;
  port_descriptions[host].params_count = 8;
  if (host_outstanding == 0) {
    host_outstanding = 1;
    printf("WARNING: in \"%s\" the \"host_outstanding\" parameter is 0, a default value of 1 is used\n", name());
  }
  port_descriptions[host].pending = host_outstanding;
  port_descriptions[host].read_data_queue_size = host_read_data_queue_size;
  port_descriptions[host].write_data_queue_size = host_write_data_queue_size;
  port_descriptions[host].clock = axi_clock;
  m_machineArch->configureClock(host, mb::sysc::sc_time_to_ps(axi_clock));
  port_descriptions[host].add_read_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !0, 0);
  port_descriptions[host].add_read_phase(tlm::tlm_phase(tlm::END_REQ), !1, 0);
  port_descriptions[host].add_read_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !1, 1);
  port_descriptions[host].add_read_phase(tlm::tlm_phase(tlm::END_RESP), !0, 1);
  port_descriptions[host].add_write_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !0, 0);
  port_descriptions[host].add_write_phase(tlm::tlm_phase(tlm::END_REQ), !1, 0);
  port_descriptions[host].add_write_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !1, 1);
  port_descriptions[host].add_write_phase(tlm::tlm_phase(tlm::END_RESP), !0, 1);

  fix_clock_parameter(signal_clock, "signal_clock");
  separate_read_channel = false;
  separate_write_channel = false;
  port_descriptions[irq].port_name = "irq";
  separate_write_channel = true;
  port_descriptions[irq].port_kind = PortDescription::WRITE_CHANNEL_PORT;
  if (separate_write_channel && separate_read_channel)
    port_descriptions[irq].port_kind = PortDescription::SEPARATE_READ_WRIE_CHANNEL_PORT;
  port_descriptions[irq].is_read_write_address_channel = 0;
  
  port_descriptions[irq].is_master_port = 1;
  port_descriptions[irq].is_signal_port = 1;
  port_descriptions[irq].port_width = ((1 + 7) >> 3);
  port_descriptions[irq].port_width_in_bits = 1;
  port_descriptions[irq].protocol_name = "signal";
  port_descriptions[irq].ipxactBusDef.vendor = "Mentor.com";
  port_descriptions[irq].ipxactBusDef.library = "Lib_ipxact";
  port_descriptions[irq].ipxactBusDef.name = "signal";
  port_descriptions[irq].ipxactBusDef.version = "1.0"; 
  port_descriptions[irq].ipxactAbstrDef.vendor = "Mentor.com";
  port_descriptions[irq].ipxactAbstrDef.library = "Lib_ipxact";
  port_descriptions[irq].ipxactAbstrDef.name = "signal_tlm20";
  port_descriptions[irq].ipxactAbstrDef.version = "1.0";
  port_descriptions[irq].port_must_bind = 1;
  port_descriptions[irq].params_count = 3;
  port_descriptions[irq].clock = signal_clock;
  m_machineArch->configureClock(irq, mb::sysc::sc_time_to_ps(signal_clock));
  port_descriptions[irq].add_write_phase(tlm::tlm_phase(tlm::BEGIN_REQ), !1, 1);
  port_descriptions[irq].add_write_phase(tlm::tlm_phase(tlm::BEGIN_RESP), !0, 1);


  port_descriptions[host].default_read_transaction_name = "READ";
  port_descriptions[host].default_write_transaction_name = "WRITE";
  port_descriptions[irq].default_write_transaction_name = "WRITE";

  fix_internal_clock_parameter(clock, "clock");
  set_ports(mb::sysc::sc_time_to_ps(clock), port_count, port_descriptions);

  bool isCpu = false;
  
  esl::tlm_sim::UserRunningModel* userRunningModel = Papoulis_CreateUserRunningModel(name(),
                                                                                     0,
                                                                                     this,
                                                                                     simulation,
                                                                                     false,
                                                                                     isCpu);
  setUserRunningModel(userRunningModel, isCpu);
  set_nominal_voltage(nominal_voltage);
  registerParameter("clock", "sc_core::sc_time", sdGetParameterAsConstString("clock"));
  registerParameter("signal_clock", "sc_core::sc_time", sdGetParameterAsConstString("signal_clock"));
  registerParameter("axi_clock", "sc_core::sc_time", sdGetParameterAsConstString("axi_clock"));
  registerParameter("nominal_voltage", "double", sdGetParameterAsConstString("nominal_voltage"));
  registerParameter("mb_debug", "bool", sdGetParameterAsConstString("mb_debug"));
  registerParameter("call_to_default_if", "bool", sdGetParameterAsConstString("call_to_default_if"));
  registerParameter("verbose_parameters", "bool", sdGetParameterAsConstString("verbose_parameters"));
  registerParameter("dmi_enabled", "bool", sdGetParameterAsConstString("dmi_enabled"));
  registerParameter("warning_level", "const char*", sdGetParameterAsConstString("warning_level"));
  registerParameter("host_pipeline_length", "unsigned int", sdGetParameterAsConstString("host_pipeline_length"));
  registerParameter("host_outstanding", "unsigned int", sdGetParameterAsConstString("host_outstanding"));
  registerParameter("host_read_data_queue_size", "unsigned int", sdGetParameterAsConstString("host_read_data_queue_size"));
  registerParameter("host_write_data_queue_size", "unsigned int", sdGetParameterAsConstString("host_write_data_queue_size"));
  registerParameter("eth_name", "const char*", sdGetParameterAsConstString("eth_name"));
  registerParameter("eth_mac", "const char*", sdGetParameterAsConstString("eth_mac"));
  set_sync_all(0); 
  
  
  
  
  

  
  

  


  

  constant_global_power_policy* p = new constant_global_power_policy(userRunningModel);
  
  
  
  set_global_power_policy(p);
}

void smc91x_t_base::update_sync_all() {
  set_sync_all(0);
  
}

void smc91x_t_base::update_pipeline_parameters(esl::sc_sim::pipeline_policy* handle) {
  if (m_pipeline_vector.size() == 0)
    return;


}

void smc91x_t_base::update_sequential_parameters(esl::sc_sim::sequential_policy* handle) {
  if (m_sequential_vector.size() == 0)
    return;

}

void smc91x_t_base::update_delay_parameters(esl::sc_sim::delay_policy* handle) {
  if (m_delay_vector.size() == 0)
    return;

}

void smc91x_t_base::update_bus_parameters(esl::sc_sim::uniform_bus_policy* handle) {
  if (m_bus_vector.size() == 0)
    return;

}

void smc91x_t_base::update_power_parameters(esl::sc_sim::power_policy* handle) {
  if (m_power_vector.size() == 0)
    return;

}

void smc91x_t_base::update_state_power_parameters(esl::sc_sim::state_power_policy* handle) {
  if (m_state_power_vector.size() == 0)
    return;

}

void smc91x_t_base::update_global_power_parameters(esl::sc_sim::constant_global_power_policy* handle) {
  
  
  return;  
}

bool smc91x_t_base::triggerRegistersGotHit(unsigned portIndex, tlm::tlm_generic_payload& trans) {
  mb::utl::Segment<uint64_t> transactionRange(trans.get_address(), trans.get_address() + trans.get_data_length());

  return false;
}

bool smc91x_t_base::portHasRegisters(unsigned portIndex) {
  switch (portIndex) {

  }
  return false;
}



/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file is write protected.
//* DO NOT MODIFY THIS FILE.
//*
//* This file contains the PVT class for smc91x.
//* It connects between the PV and T models.
//* Your top-level design should instantiate this model.
//* 
//* In order to synchronize the activty between the PV and the T models, every 
//* PV transaction is monitored and queued in the T sync ports.
//* Whenever a synchronization point is reached, the T models are executed and 
//* the corresponding T transactions are launched.
//* A synchronization point is reached whenever there is a wait statement on a testbench thread. 
//*
//* Model Builder version: 4.1.0
//* Generated on: Jan. 18, 2016 04:09:45 PM, (user: mbradley)
//*>

#include "smc91x_model.h"

using namespace std;
using namespace sc_core;
using namespace sc_dt;


#include "smc91x_pv.h"




// Constructor
smc91x_pvt::smc91x_pvt(sc_module_name module_name)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
    smc91x_pvt_param_defaults(this->name()),
    host("host"),
    irq("irq"),
    host_entry("unvisible_host_entry"),
    m_irq_nb_connector(*this),
    m_host_nb_connector(*this)

{


  m_smc91x_t = smc91x_t_base::create_t("T", 1);
  m_smc91x_pv = new smc91x_pv("PV");
  bind();
}  


smc91x_pvt::smc91x_pvt(sc_module_name module_name, sc_core::sc_time clock_init, sc_core::sc_time signal_clock_init, sc_core::sc_time axi_clock_init, double nominal_voltage_init, bool mb_debug_init, bool call_to_default_if_init, bool verbose_parameters_init, bool dmi_enabled_init, const char* warning_level_init, unsigned int host_pipeline_length_init, unsigned int host_outstanding_init, unsigned int host_read_data_queue_size_init, unsigned int host_write_data_queue_size_init, const char* eth_name_init, const char* eth_mac_init)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
  smc91x_pvt_param_defaults(this->name(), clock_init, signal_clock_init, axi_clock_init, nominal_voltage_init, mb_debug_init, call_to_default_if_init, verbose_parameters_init, dmi_enabled_init, warning_level_init, host_pipeline_length_init, host_outstanding_init, host_read_data_queue_size_init, host_write_data_queue_size_init, eth_name_init, eth_mac_init),
    host("host"),
    irq("irq"),
    host_entry("unvisible_host_entry"),
    m_irq_nb_connector(*this),
    m_host_nb_connector(*this)
{


  m_smc91x_t = smc91x_t_base::create_t("T", 1);
  m_smc91x_pv = new smc91x_pv("PV");
  bind();
} 

smc91x_pvt::smc91x_pvt(sc_module_name module_name,  std::vector<std::pair<char*, unsigned int> > &change_parameters)
  : esl::sc_sim::PVTBaseModel(module_name, 0),
  smc91x_pvt_param_defaults(this->name(), change_parameters),
    host("host"),
    irq("irq"),
    host_entry("unvisible_host_entry"),
    m_irq_nb_connector(*this),
    m_host_nb_connector(*this)
{


  m_smc91x_t = smc91x_t_base::create_t("T", 1);
  m_smc91x_pv = new smc91x_pv("PV");
  bind();
} 

smc91x_pvt::~smc91x_pvt() {
  remove_pending_scenes();
  delete m_smc91x_t; delete m_smc91x_pv;
}




void smc91x_pvt::bind()
{
  /* connect pv to entry ports */
  
  
  host_entry.bind(getPV()->host);
  getPV()->irq.bind(irq_entry);   

  /* set callbacks on external and entry ports */ 

  host.b_transport_cb.set(&host_entry, &host_entry_type::b_transport);
  host.transport_dbg_cb.set(&host_entry, &host_entry_type::transport_dbg);
  host.get_direct_mem_ptr_cb.set(&host_entry, &host_entry_type::get_direct_mem_ptr);

  irq_entry.write_cb.set(this, &self_type::b_transport_outside_irq);

  
  /* connect t non blocking callbacks */

  irq.nb_transport_bw_cb.set(this, &self_type::receive_nb_transport_irq);
  getT()->set_port_cb(1, &m_irq_nb_connector);

  host.nb_transport_fw_cb.set(this, &self_type::receive_nb_transport_host);
  getT()->set_port_cb(0, &m_host_nb_connector);

  host_entry.invalidate_direct_mem_ptr_cb.set(&host, &host_type::invalidate_direct_mem_ptr);

  /* check mb_event policies */
  m_smc91x_t->check_mb_events();
}



void smc91x_pvt::b_transport_outside_irq(bool data)
{
  static tlm::tlm_generic_payload payload;

  payload.reset();
  payload.set_command(tlm::TLM_WRITE_COMMAND);
  payload.set_data_ptr((unsigned char*)&data);
  payload.set_data_length(sizeof(bool));
  payload.set_streaming_width(sizeof(bool));

  mb::tlm20::clear_pvt_ext(payload);
  mb::tlm20::setup_pvt_ext(payload)->set_signal(true);

  

  mb::mb_module* current_model = dynamic_cast<mb::mb_module*>(m_smc91x_pv);
  if (current_model)
    mb::tlm20::setup_pvt_ext(payload)->setToken(current_model->get_current_token());
  sc_time t;
  irq.b_transport(payload, t);
}

