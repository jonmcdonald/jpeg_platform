
/**************************************************************/
/*                                                            */
/*      Copyright Mentor Graphics Corporation 2006 - 2012     */
/*                  All Rights Reserved                       */
/*                                                            */
/*       THIS WORK CONTAINS TRADE SECRET AND PROPRIETARY      */
/*         INFORMATION WHICH IS THE PROPERTY OF MENTOR        */
/*         GRAPHICS CORPORATION OR ITS LICENSORS AND IS       */
/*                 SUBJECT TO LICENSE TERMS.                  */
/*                                                            */
/**************************************************************/

//*<
//* Generated By Model Builder, Mentor Graphics Computer Systems, Inc.
//*
//* This file contains the PV class for RST_CLK_CTRL.
//* This is a template file: You may modify this file to implement the 
//* behavior of your component. 
//* 
//* Model Builder version: 3.0.2.beta1
//* Generated on: Dec. 26, 2010 03:28:27 PM, (user: sagihb)
//* Automatically merged on: Feb. 04, 2011 10:36:49 AM, (user: zamir)
//* Automatically merged on: Sep. 07, 2011 11:39:35 AM, (user: awinterg)
//* Automatically merged on: Feb. 22, 2012 07:00:37 PM, (user: zamir)
//* Automatically merged on: Aug. 16, 2012 12:58:07 PM, (user: araskin)
//*>



#include "RST_CLK_CTRL_pv.h"
#include <iostream>

using namespace sc_core;
using namespace sc_dt;
using namespace std;

//constructor
RST_CLK_CTRL_pv::RST_CLK_CTRL_pv(sc_module_name module_name) 
  : RST_CLK_CTRL_pv_base(module_name) {

  nUART0_RST.initialize(true);     //Active Low
  UART0_VIS_EN.initialize(true);   //Active High
}   

/////////////////////////////////////////////////////////////////////////////////
// Use these functions to define the behavior of your model when there is a 
// write event on one of the registers as defined in the Model Builder form.
// These functions are called before the write callbacks on the port.
///////////////////////////////////////////////////////////////////////////////// 

// Write callback for uart_vis0_ctrl_reg register.
// The newValue has been already assigned to the uart_vis0_ctrl_reg register.
void RST_CLK_CTRL_pv::cb_write_uart_vis0_ctrl_reg(unsigned int newValue) {
  
  if (newValue == 1)
  {
    //cout <<name()<<" @ "<<sc_time_stamp()<<" UART0_VIS_EN change to false \n";
    UART0_VIS_EN = false;
  }
}
 
// Read callback for slave0 port.
// Returns true when successful.
bool RST_CLK_CTRL_pv::slave0_callback_read(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
}

// Write callback for slave0 port.
// Returns true when successful.
bool RST_CLK_CTRL_pv::slave0_callback_write(mb_address_type address, unsigned char* data, unsigned size) {
  
  return true;
} 




unsigned RST_CLK_CTRL_pv::slave0_callback_read_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

unsigned RST_CLK_CTRL_pv::slave0_callback_write_dbg(mb_address_type address, unsigned char* data, unsigned size) {
  return 0;
} 

bool RST_CLK_CTRL_pv::slave0_get_direct_memory_ptr(mb_address_type address, tlm::tlm_dmi& dmiData) {
  return false;
}
void RST_CLK_CTRL_pv::cb_transport_dbg_uart_vis0_ctrl_reg(tlm::tlm_generic_payload& trans) {
}
